digraph g {
	table [label=<<TABLE><TR><TD>PRODUCCION</TD><TD>REGLAS SEMANTICAS</TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> declaracion_variable → tipo IDENTIFICADOR indices = { lista_expresiones } </TD><TD> t[0] = DeclaracionArray(id,t.lexer.lineno,t[1].valor,t[2],t[3],t[6]) </TD></TR>
 <TR><TD> instrucciones → instruccion </TD><TD> instrucciones=t[1] </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> instrucciones → instrucciones instruccion </TD><TD> instrucciones=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> lista_identificadores → IDENTIFICADOR </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]))</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> lista_identificadores → IDENTIFICADOR </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]))</TD></TR><TR><TD> lista_identificadores → lista_identificadores , declaracion_identificador </TD><TD> t[1].append(t[3]) <BR/> t[0] = t[1] </TD></TR><TR><TD> lista_identificadores → IDENTIFICADOR </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]))</TD></TR><TR><TD> lista_identificadores → lista_identificadores , declaracion_identificador </TD><TD> t[1].append(t[3]) <BR/> t[0] = t[1] </TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_asignacion → IDENTIFICADOR asignacion_compuesta exp </TD><TD> t[0] = AsignacionSimple(id,t.lexer.lineno,t[1],t[2].valor,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_incremento → IDENTIFICADOR ++; </TD><TD> t[0] = ExpresionIncremento(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_asignacion → IDENTIFICADOR asignacion_compuesta exp </TD><TD> t[0] = AsignacionSimple(id,t.lexer.lineno,t[1],t[2].valor,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_incremento → IDENTIFICADOR ++; </TD><TD> t[0] = ExpresionIncremento(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR indices </TD><TD> t[0] = ExpresionPuntero(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR indices </TD><TD> t[0] = ExpresionPuntero(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR indices </TD><TD> t[0] = ExpresionPuntero(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> sentencia_asignacion → IDENTIFICADOR asignacion_compuesta exp </TD><TD> t[0] = AsignacionSimple(id,t.lexer.lineno,t[1],t[2].valor,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR indices </TD><TD> t[0] = ExpresionPuntero(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> sentencia_asignacion → IDENTIFICADOR indices asignacion_compuesta exp </TD><TD> t[0] = AsignacionArray(id,t.lexer.lineno,t[1],t[3].valor,t[2],t[4]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_asignacion → IDENTIFICADOR indices asignacion_compuesta exp </TD><TD> t[0] = AsignacionArray(id,t.lexer.lineno,t[1],t[3].valor,t[2],t[4]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_for → for(expresion;expresion;expresion) { declaraciones }</TD><TD> t[0] = For(id,t.lexer.lineno,t[3],t[5],t[7],t[9]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_for → for(expresion;expresion;expresion) { declaraciones }</TD><TD> t[0] = For(id,t.lexer.lineno,t[3],t[5],t[7],t[9]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR>
 <TR><TD> declarar_funcion → IDENTIFICADOR () { declaraciones } ;  </TD><TD> t[0] = Funcion(id,t.lexer.lineno,t[1],str(t[2]),t[5]) </TD></TR><TR><TD> instrucciones → instrucciones instruccion </TD><TD> instrucciones=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → ENTERO | DECIMAL </TD><TD> t[0] = ExpNum(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_incremento → IDENTIFICADOR ++; </TD><TD> t[0] = ExpresionIncremento(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR indices </TD><TD> t[0] = ExpresionPuntero(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_for → for(expresion;expresion;expresion) { declaraciones }</TD><TD> t[0] = For(id,t.lexer.lineno,t[3],t[5],t[7],t[9]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR>
 <TR><TD> declarar_funcion → IDENTIFICADOR () { declaraciones } ;  </TD><TD> t[0] = Funcion(id,t.lexer.lineno,t[1],str(t[2]),t[5]) </TD></TR><TR><TD> instrucciones → instrucciones instruccion </TD><TD> instrucciones=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_funcion → IDENTIFICADOR (); </TD><TD> t[0] = LlamaFuncion(id,t.lexer.lineno,t[1],None)</TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> sentencia_funcion → IDENTIFICADOR (); </TD><TD> t[0] = LlamaFuncion(id,t.lexer.lineno,t[1],None)</TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> sentencia_funcion → IDENTIFICADOR (); </TD><TD> t[0] = LlamaFuncion(id,t.lexer.lineno,t[1],None)</TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR>
 <TR><TD> declarar_funcion → IDENTIFICADOR () { declaraciones } ;  </TD><TD> t[0] = Funcion(id,t.lexer.lineno,t[1],str(t[2]),t[5]) </TD></TR><TR><TD> instrucciones → instrucciones instruccion </TD><TD> instrucciones=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> sentencia_etiqueta → IDENTIFICADOR :</TD><TD> t[0] = Etiqueta(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → scanf() </TD><TD> t[0] = ExpresionScanf(id,t.lexer.lineno) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → scanf() </TD><TD> t[0] = ExpresionScanf(id,t.lexer.lineno) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → scanf() </TD><TD> t[0] = ExpresionScanf(id,t.lexer.lineno) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> sentencia_if → if_list else { declaraciones }</TD><TD> t[1].agregarIf(t[3]) <BR/> t[0] = t[1] </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> sentencia_if → if_list else { declaraciones }</TD><TD> t[1].agregarIf(t[3]) <BR/> t[0] = t[1] </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> sentencia_if → if_list else { declaraciones }</TD><TD> t[1].agregarIf(t[3]) <BR/> t[0] = t[1] </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → scanf() </TD><TD> t[0] = ExpresionScanf(id,t.lexer.lineno) </TD></TR><TR><TD> declaracion_identificador → IDENTIFICADOR = expresion </TD><TD> t[0] = Variable(id,t.lexer.lineno,str(t[1]),t[3])</TD></TR><TR><TD> lista_identificadores → declaracion_identificador </TD><TD> t[0] = [t[1]]</TD></TR><TR><TD> declaracion_variable → tipo identificadores </TD><TD> t[0] = DeclaracionSimple(id,t.lexer.lineno,t[1].valor,t[2]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → IDENTIFICADOR </TD><TD> t[0] = ExpIdentificador(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresiones → expresion1 op expresion2 </TD><TD> t[0] = Expresion(id,t.lexer.lineno,t[1],OPERACION,t[3]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_goto → goto IDENTIFICADOR;</TD><TD> t[0] = Goto(id,t.lexer.lineno,t[2]) </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR><TR><TD> if → if(expresiones) { declaraciones }</TD><TD> t[0] = Ifsimple(id,t.lexer.lineno,t[3],t[5]) </TD></TR><TR><TD> expresion → CADENA </TD><TD> t[0] = ExpresionCadena(id,t.lexer.lineno,t[1]) </TD></TR><TR><TD> sentencia_print → printf (expresiones);</TD><TD> t[0] = Print(id,t.lexer.lineno,t[3]) </TD></TR><TR><TD> lista_sentencias → sentencia </TD><TD> sentencia = [t[1]]</TD></TR><TR><TD> sentencia_if → if_list else { declaraciones }</TD><TD> t[1].instrucciones_else=t[3] </TD></TR><TR><TD> lista_sentencias → lista_sentencias sentencia </TD><TD> lista_sentencias=t[1].append(t[2]) <BR/> instrucciones=t[1] </TD></TR>
 <TR><TD> declarar_funcion → IDENTIFICADOR () { declaraciones } ;  </TD><TD> t[0] = Funcion(id,t.lexer.lineno,t[1],str(t[2]),t[5]) </TD></TR>
 <TR><TD> instrucciones → instruccion </TD><TD> instrucciones=t[1] </TD></TR></TABLE>>]
}
